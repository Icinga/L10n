#!/bin/bash

set -xe

SOURCE_REPOSITORIES=(
  ipl-html
  ipl-web
  ipl-validator
  icingaweb2
  icingaweb2-module-director
  icingaweb2-module-vspheredb
  icingadb-web
  icingaweb2-module-reporting
  icingaweb2-module-graphite
  icingaweb2-module-cube
  icingaweb2-module-aws
  icingaweb2-module-businessprocess
  icingaweb2-module-jira
  icingaweb2-module-nagvis
  icingaweb2-module-pdfexport
  icingaweb2-module-x509
  icingaweb2-module-audit
  icinga-notifications-web
  icinga-kubernetes-web
)

function project_id_version()
{
    echo $(sed -n '/^"Project-Id-Version:/{
N
s/.*\([a-f0-9]\{40\}\)\\n".*/\1/p
}' "$1")
}

# Fetch repositories which do not exist yet in the directory
FETCHED_REPOS=();
for repo_name in "${SOURCE_REPOSITORIES[@]}"; do
  if [ ! -d "sources.d/$repo_name" ]; then
    FETCHED_REPOS+=( $repo_name );

    git clone --depth 1 https://github.com/Icinga/$repo_name.git sources.d/$repo_name
  fi
done

for repo_name in "${SOURCE_REPOSITORIES[@]}"; do
  if [ ! -d $repo_name ]; then
    mkdir $repo_name
  fi

  git_head=$(git -C sources.d/$repo_name rev-parse HEAD)

  # Create a list of files xgettext should scan
  find -L sources.d/$repo_name -regex ".*\.\(php\|phtml\)" ! -path "*/vendor/*" ! -path "*/test/*" > $repo_name/catalog.txt

  xgettext --language=PHP \
           --keyword=translate \
           --keyword=translate:1,2c \
           --keyword=translatePlural:1,2 \
           --keyword=translatePlural:1,2,4c \
           --keyword=mt:2 \
           --keyword=mt:2,3c \
           --keyword=mtp:2,3 \
           --keyword=mtp:2,3,5c \
           --keyword=t \
           --keyword=t:1,2c \
           --keyword=tp:1,2 \
           --keyword=tp:1,2,4c \
           --keyword=N_ \
           --from-code=utf-8 \
           --files-from=$repo_name/catalog.txt \
           --sort-by-file \
           --copyright-holder="Icinga GmbH" \
           --package-name=$repo_name \
           --package-version=$git_head \
           --default-domain=icinga \
           --output=$repo_name/messages.new.pot

  if [ ! -s $repo_name/messages.new.pot ]; then
    rm $repo_name/catalog.txt
    echo "No messages found in $repo_name. Skipping."
    continue
  fi

  # Use current year in the copyright for new templates without one yet
  REPLACE_CODE=$(cat << PYTHON
import sys, argparse, re
input = sys.stdin.read()
parser = argparse.ArgumentParser()
parser.add_argument('--repo-name')
parser.add_argument('--git-head')
args = parser.parse_args()
from datetime import date
result = input.replace(
    '# Copyright (C) YEAR Icinga GmbH',
    '# Copyright (C) {0} Icinga GmbH'.format(date.today().year),
    1
).replace(
    '"Content-Type: text/plain; charset=CHARSET',
    '"Content-Type: text/plain; charset=UTF-8',
    1
).replace(
  '# SOME DESCRIPTIVE TITLE.',
  '# {0} translation catalog.'.format(args.repo_name),
  1
)
result = re.sub(
    '^#: sources.d/{}/(.*?):(\d+)'.format(args.repo_name),
    '#: https://github.com/Icinga/{repo_name}/blob/{git_head}/\\\\1#L\\\\2'.format(**vars(args)),
    result,
    count=0,
    flags=re.MULTILINE
)
sys.stdout.write(result)
PYTHON
)
  ADD_LEGACY_COMMENT_CODE=$(cat << PYTHON
import sys, argparse, re
input = sys.stdin.read()
parser = argparse.ArgumentParser()
parser.add_argument('--git-head')
args = parser.parse_args()
result = re.sub(
    '^\n#:',
    '\n#. last-seen={git_head}\n#:'.format(git_head=args.git_head),
    input,
    count=0,
    flags=re.MULTILINE
)
sys.stdout.write(result)
PYTHON
)
  cat $repo_name/messages.new.pot | python3 -c "$REPLACE_CODE" --repo-name=$repo_name --git-head=$git_head > temp
  mv temp $repo_name/messages.new.pot

  if [ -s $repo_name/messages.pot ]; then
    old_head=$(project_id_version "$repo_name/messages.pot")

    # Merge new template with the existing template
    # Does not work though, if only a plural form has changed…
    msgcomm --more-than=0 -o temp $repo_name/messages.new.pot $repo_name/messages.pot # First identify unique messages
    # Then identify messages that are only in the old template (skips the header using awk)
    msgcomm -u temp $repo_name/messages.new.pot | awk 'NF { if (!skip) next } { skip = 1; print }' > $repo_name/messages.old.pot
    # Add legacy comments to the old template
    cat $repo_name/messages.old.pot | python3 -c "$ADD_LEGACY_COMMENT_CODE" --git-head=$old_head > temp
    mv temp $repo_name/messages.old.pot
    # Then merge both, but without duplicating locations and such…
    xgettext --omit-header -o $repo_name/messages.pot $repo_name/messages.new.pot $repo_name/messages.old.pot
    # Cleanup created files and directories
    rm $repo_name/messages.old.pot
    rm $repo_name/messages.new.pot
  else
    # If no old template exists, just rename the new one
    mv $repo_name/messages.new.pot $repo_name/messages.pot
  fi

  # Cleanup created files and directories
  rm $repo_name/catalog.txt
  if [[ " ${FETCHED_REPOS[*]} " =~ " ${repo_name} " ]]; then
    rm -rf sources.d/$repo_name
  fi
done

# Check for changes (new messages) that need to be committed
CHANGES=1
git diff -U0 \
  | grep -Pe '^[+-]{1}(?!#:)[^+-]+' \
  | grep -vPe '^[+-]"[a-f0-9]{40}\\n"' \
  | grep -qv -e '."Project-Id-Version:' -e '."POT-Creation-Date:' \
|| CHANGES=0

if [ $CHANGES -eq 0 ]; then
  echo "No new messages found.";
  git checkout */messages.pot
else
  echo "New messages found!";
  # Working tree is left dirty as the following step creates a new pull request
fi
